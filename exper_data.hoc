// {load_file("exper_channel.hoc")}

objref tobj
tobj = new List("ChannelBuild")
channel_cbindex_ = tobj.count-1
objref tobj
set_true_parameters(ChannelBuild[channel_cbindex_].aliases)

begintemplate ExperimentalModelContext
public soma1, ch, stim, record, setseed
create soma1
objref ch, stim, cb, this
external channel_cbindex_, ChannelBuild

proc init() {localobj s
	s = new String()
	cb = ChannelBuild[channel_cbindex_]
	sprint(s.s, "ch = new %s(.5)", cb.ks.name)
	soma1 {
		execute(s.s, this)
		ch.Nsingle = $1
		stim = new SEClamp(.5)
		stim.dur1 = 1e9
		stim.amp1 = 20
		stim.rs = .1
	}
}

proc record() {
	$o1.record(&ch.O, $o2)
}

proc setseed() {
	cb.ks.rseed($1*100000)
}

endtemplate ExperimentalModelContext

obfunc experimentalDataGenerator() { local sav localobj m, tvec, ov, nil, xmd, ymd
	// m = $o4
	m = new ExperimentalModelContext($1)
	ov = new Vector()
	m.record(ov, $o3)

	// TAKE THIS CODE OUT: Filling Fitness Function via Repro passing tvec=$o3
	// if (numarg() > 3 ) {
	//  	ff = $o4 // fitness function
	//  	xmd = ff.xdat.c
	//  	ymd = new Vector()
	//  	m.record(ymd, xmd)
	// }

	sav = cvode.active()
	cvode.active(0)
	// TAKE OUT dt? or is dt a global variable:
	dt = 0.025
	// What is v_init below -- must be a global variable?
	finitialize(v_init)
	m.setseed($2)
	run()
	// for some reason the BG/P clears ymd and ov when m is destroyed
	// take out ff does equal nil:
	// if (ff != nil) ymd = ymd.c()
	ov = ov.c()
	m = nil
	cvode.active(sav)
	finitialize()
	// Take out ff does equal nil:
	// if (ff != nil) {
	//		ymd.mul(1/$1)
	//		sav = ff.n_chdat
	//		ff.set_data(xmd,ymd)
	//		execute("setxy()", ff)
//		ff.n_chdat = sav
	// }
	return ov.mul(1/$1)
}

proc test() {localobj vv, tvec, pvec
	pvec = new Vector(0)
	pvec.append($3, $4)
	tvec = new Vector()
	tvec.indgen(0,tstop,.1)
	vv = experimentalDataGenerator($1, $2, tvec)
	vv.printf()
}

// test(1000, 1, 4, 2)

